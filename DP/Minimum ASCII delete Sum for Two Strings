class Solution {
  int dp[][];
  public int solve(String s1,String s2,int i,int j) {

          if(s1.equals(s2))
            return 0;

          if(i>=s1.length() && j>=s2.length()) 
          return 0;

          
        if(dp[i][j]!=-1)
         return dp[i][j];


      if(i>=s1.length())
      return  dp[i][j]= (int)s2.charAt(j)+solve(s1,s2,i,j+1);

      if(j>=s2.length())
      return   dp[i][j]=(int)s1.charAt(i)+solve(s1,s2,i+1,j);

      if(s1.charAt(i)==s2.charAt(j))
      return dp[i][j]=solve(s1,s2,i+1,j+1);

      int delete_s1_i=(int)s1.charAt(i)+solve(s1,s2,i+1,j);
      int delete_s2_j=(int)s2.charAt(j)+solve(s1,s2,i,j+1);
      return dp[i][j]=Math.min(delete_s1_i,delete_s2_j);
  }
    public int minimumDeleteSum(String s1, String s2) {
      dp=new int[s1.length()+1][s2.length()+1];
      for(int i=0;i<dp.length;i++) {
        for(int j=0;j<dp[0].length;j++)
        dp[i][j]=-1;
      }
      return solve(s1,s2,0,0);
    }
}