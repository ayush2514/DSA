/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    ListNode reverse(ListNode list) {
      ListNode prev=null;
      ListNode curr=list;
      while(curr!=null) {
        ListNode temp=curr.next;
        curr.next=prev;
        prev=curr;
        curr=temp;
      }
      return prev;
    }
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
      ListNode dummy=new ListNode();
      ListNode temp=dummy;
      int sum=0;
      int carry=0;
      Stack<Integer> s1=new Stack<>();
      Stack<Integer> s2=new Stack<>();
      while(l1!=null)  {
        s1.push(l1.val);
        l1=l1.next;
      }
      while(l2!=null)  {
        s2.push(l2.val);
        l2=l2.next;
      }
      
      while(!s1.isEmpty() || !s2.isEmpty() || carry==1) {
          if(!s1.isEmpty()) {
            sum+=s1.pop();
          }
          if(!s2.isEmpty()) {
            sum+=s2.pop();
          }
          sum+=carry;
          carry=sum/10;
          ListNode n=new ListNode(sum%10);
          temp.next=n;
          temp=temp.next;
          sum=0;
        }

       return reverse(dummy.next);
    }
}