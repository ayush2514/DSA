/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
  ListNode getMid(ListNode head) {
    ListNode slow=head;
    ListNode fast=head.next;

    while(fast!=null && fast.next!=null) {
      slow=slow.next;
      fast=fast.next.next;
    }
    return slow;
  }
  ListNode reverseList(ListNode head) {
    ListNode current=head;
    ListNode previous=null;
    while(current!=null) {
      ListNode temp=current.next;
      current.next=previous;
      previous=current;
      current=temp;
    }
    return previous;
  }
    public boolean isPalindrome(ListNode head) {
        if(head.next==null) return true;

        ListNode middle=getMid(head);
        ListNode temp=reverseList(middle.next);
        
        ListNode head1=head;
        ListNode head2=temp;

        while(head2!=null) {
          if(head1.val!=head2.val) return false;

          head1=head1.next;
          head2=head2.next;
        }
        return true;
    }
}