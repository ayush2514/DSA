class Pair implements Comparable<Pair>{
  int sp;
  int ep;
  Pair(int sp,int ep) {
    this.sp=sp;
    this.ep=ep;
  }
  public int compareTo(Pair other) {
    if(this.ep!=other.ep)
    return this.ep-other.ep;
    else
    return this.sp-other.sp;
  }
}
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        Pair pair[]=new Pair[intervals.length];
        for(int i=0;i<pair.length;i++) {
          pair[i]=new Pair(intervals[i][0],intervals[i][1]);
        }
        Arrays.sort(pair);
        Stack<Pair> s=new Stack<>();
        int count=0;
        for(int i=0;i<pair.length;i++) {
          if(i==0) {
            s.push(pair[i]);
          }
          else {
            Pair p=s.peek();
            if(pair[i].sp<p.ep) {
              if(pair[i].ep<=p.ep) {
                s.pop();
                s.push(pair[i]);
                count++;
              }

              else {
                count++;
              }
            }
            else s.push(pair[i]);
          }
        }
        return count;
    }
}