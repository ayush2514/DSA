import java.util.*;

class Pair implements Comparable<Pair> {
    int st;
    int et;

    Pair(int st, int et) {
        this.st = st;
        this.et = et;
    }

    public int compareTo(Pair other) {
        if (this.st != other.st)
            return this.st - other.st;
        else
            return this.et - other.et;
    }
}

class Solution {
    public int[][] merge(int[][] intervals) {
        Pair[] pairs = new Pair[intervals.length];
        for (int i = 0; i < pairs.length; i++) {
            pairs[i] = new Pair(intervals[i][0], intervals[i][1]);
        }
        Arrays.sort(pairs);
        Stack<Pair> s = new Stack<>();
        for (int i = 0; i < pairs.length; i++) {
            if (i == 0) {
                s.push(pairs[i]);
            } else {
                Pair top = s.peek();
                if (pairs[i].st > top.et)
                    s.push(pairs[i]);
                else
                    top.et = Math.max(top.et, pairs[i].et);
            }
        }
        Stack<Pair> ns = new Stack<>();
        while (!s.isEmpty()) {
            ns.push(s.pop());
        }
        int[][] result = new int[ns.size()][2];
        int i = 0;
        while (!ns.isEmpty()) {
            Pair p = ns.pop();
            result[i][0] = p.st;
            result[i][1] = p.et;
            i++;
        }
        return result;
    }
}
