class Solution {
  public void generateCombinations(int[] candidates,int index, int target,List<Integer> ds, List<List<Integer>> result) {
    if(index==candidates.length) {
    if(target==0) 
      result.add(new ArrayList<>(ds));

      return;
    } 
     if(candidates[index]<=target) {
       ds.add(candidates[index]);
       generateCombinations(candidates,index,target-candidates[index],ds,result);
       ds.remove(ds.size()-1);
      }
      
    generateCombinations(candidates,index+1,target,ds,result);
  }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
     
        List<List<Integer>> result=new ArrayList<>();
        generateCombinations(candidates,0,target,new ArrayList<>(),result);
        return result;
    }
}